AWSTemplateFormatVersion: "2010-09-09"

Description: VPC CREATION TEMPLATE

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - SubnetCidrBlock1
          - SubnetCidrBlock2
          - SubnetCidrBlock3
      - 
        Label: 
          default: "Destination CIDR"
        Parameters: 
          - DestinationCidrBlock

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: The CIDR for VPC
    Type: String
  
  SubnetCidrBlock1:
    Type: String
    Default: "10.0.1.0/24"
  
  SubnetCidrBlock2:
    Type: String
    Default: "10.0.2.0/24"
  
  SubnetCidrBlock3:
    Type: String
    Default: "10.0.3.0/24"

  DestinationCidrBlock:
    Type: String
    Default: "0.0.0.0/0"

  AmiId:
    Type: String
    Default: "ami-0d97c92948d354176"

  PrivateSubCidrBlock1:
    Type: String
    Default: "10.1.4.0/24"

  PrivateSubCidrBlock2:
    Type: String
    Default: "10.1.5.0/24"

  PrivateSubCidrBlock3:
    Type: String
    Default: "10.1.6.0/24"

  DBEngineVersion:
    Type: String
    Default: 14.3

  DBInstanceIdentifier:
    Type: String
    Default: "csye6225"

  DBInstanceClass:
    Type: String
    Default: "db.t3.micro"

  MasterDBUsername:
    Type: String
    Default: "csye6225"

  MasterDBPassword:
    Type: String
    Default: "dbs22csye6225"

  DBName:
    Type: String
    Default: "csye6225"
    
  S3BucketName:
    Type: String
    Default: "csye6225.sethu.dev"


Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: myVPC
  
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet1
  
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet2
  
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock3
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet3

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: myInternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: myRouteTable
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: !Ref DestinationCidrBlock
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref Subnet2

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  application:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web application security group
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-application-security-group'

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      SubnetId: !Ref Subnet1
      SecurityGroupIds: [!Ref application]
      DisableApiTermination: "false"
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "20"
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get upgrade -y
            touch /etc/profile.d/webenv.sh
            chmod 777 /etc/profile.d/webenv.sh
            cat > /etc/profile.d/webenv.sh << 'EOF'
              export DB_ADDRESS=${RDSDBInstance.Endpoint.Address}
              export AWS_BUCKET_NAME=${S3BucketName}
              export S3REGION=${AWS::Region}
              export DB_NAME=${DBName}
              export DB_PASSWORD=${MasterDBPassword}
              export DB_USER_NAME=${MasterDBUsername}
            EOF
            touch /home/ec2-user/webservice/.env
            cat > /home/ec2-user/webservice/.env << 'EOF'
              DB_ADDRESS=${RDSDBInstance.Endpoint.Address}
              AWS_BUCKET_NAME=${S3BucketName}
              S3REGION=${AWS::Region}
              DB_NAME=${DBName}
              DB_PASSWORD=${MasterDBPassword}
              DB_USER_NAME=${MasterDBUsername}
            EOF
            pm2 reload all --update-env
      Tags:
      - Key: Name
        Value: !Sub 'EC2Instance-${AWS::StackName}'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubCidrBlock1:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-privatesubnet1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubCidrBlock2:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-privatesubnet2'
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubCidrBlock3:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-privatesubnet2'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-PrivateRouteTable'
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet1
      - PrivateRouteTable
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet2
      - PrivateRouteTable
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet3
      - PrivateRouteTable
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref application
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-database-security-group'
  
  S3BuckeEncrypted:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: LifeCycleRule
            Status: Enabled
            ExpirationInDays: 90
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Postgres parameter group
      Family: postgres14
      Parameters:
        log_connections: 1

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnet group for DB Instance
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      Engine: postgres
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      MultiAZ: false
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      MasterUsername: !Ref MasterDBUsername
      MasterUserPassword: !Ref MasterDBPassword
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DBName
      AllocatedStorage: 20
      StorageType: "gp2"
      DBParameterGroupName: !Ref RDSParameterGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup

  WebAppS3EC2IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource:
              - !GetAtt S3BuckeEncrypted.Arn
              - !Sub '${S3BuckeEncrypted.Arn}/*'
      PolicyName: "WebAppS3"
      Roles:
        - !Ref WebAppS3EC2IAMRole

  WebAppS3EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: EC2-CSYE6225
      
  WebAppEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      InstanceProfileName: WebAppEC2InstanceProfile
      Roles:
        - !Ref WebAppS3EC2IAMRole
    
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref Vpc
  SubnetId1:
    Description: Subnet ID 1
    Value: !Ref Subnet1
  SubnetId2:
    Description: Subnet ID 2
    Value: !Ref Subnet2
  SubnetId3:
    Description: Subnet ID 3
    Value: !Ref Subnet3
