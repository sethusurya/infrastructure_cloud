AWSTemplateFormatVersion: "2010-09-09"

Description: VPC CREATION TEMPLATE

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - SubnetCidrBlock1
          - SubnetCidrBlock2
          - SubnetCidrBlock3
      - 
        Label: 
          default: "Destination CIDR"
        Parameters: 
          - DestinationCidrBlock

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: The CIDR for VPC
    Type: String
  
  SubnetCidrBlock1:
    Type: String
    Default: "10.0.1.0/24"
  
  SubnetCidrBlock2:
    Type: String
    Default: "10.0.2.0/24"
  
  SubnetCidrBlock3:
    Type: String
    Default: "10.0.3.0/24"

  DestinationCidrBlock:
    Type: String
    Default: "0.0.0.0/0"

  AmiId:
    Type: String
    Default: "ami-0d97c92948d354176"


Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: myVPC
  
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet1
  
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet2
  
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock3
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet3

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: myInternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: myRouteTable
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: !Ref DestinationCidrBlock
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref Subnet2

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  application:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web application security group
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-application-security-group'

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      InstanceType: "t2.micro"
      SubnetId: !Ref Subnet1
      SecurityGroupIds: [!Ref application]
      DisableApiTermination: "false"
      BlockDeviceMappings:
      - DeviceName: "/dev/xvda"
        Ebs: 
          VolumeType: "gp2"
          DeleteOnTermination: "true"
          VolumeSize: "20"
      Tags:
      - Key: Name
        Value: !Sub 'EC2Instance-${AWS::StackName}'
      
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref Vpc
  SubnetId1:
    Description: Subnet ID 1
    Value: !Ref Subnet1
  SubnetId2:
    Description: Subnet ID 2
    Value: !Ref Subnet2
  SubnetId3:
    Description: Subnet ID 3
    Value: !Ref Subnet3
