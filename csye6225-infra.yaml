AWSTemplateFormatVersion: "2010-09-09"

Description: VPC CREATION TEMPLATE

Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - VpcCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters:
          - SubnetCidrBlock1
          - SubnetCidrBlock2
          - SubnetCidrBlock3
      - 
        Label: 
          default: "Destination CIDR"
        Parameters: 
          - DestinationCidrBlock

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: The CIDR for VPC
    Type: String
  
  SubnetCidrBlock1:
    Type: String
    Default: "10.0.1.0/24"
  
  SubnetCidrBlock2:
    Type: String
    Default: "10.0.2.0/24"
  
  SubnetCidrBlock3:
    Type: String
    Default: "10.0.3.0/24"

  DestinationCidrBlock:
    Type: String
    Default: "0.0.0.0/0"

  AmiId:
    Type: String
    Default: "ami-0d97c92948d354176"

  PrivateSubCidrBlock1:
    Type: String
    Default: "10.1.4.0/24"

  PrivateSubCidrBlock2:
    Type: String
    Default: "10.1.5.0/24"

  PrivateSubCidrBlock3:
    Type: String
    Default: "10.1.6.0/24"

  DBEngineVersion:
    Type: String
    Default: 14.3

  DBInstanceIdentifier:
    Type: String
    Default: "csye6225"

  DBInstanceClass:
    Type: String
    Default: "db.t3.micro"

  MasterDBUsername:
    Type: String
    Default: "csye6225"

  MasterDBPassword:
    Type: String
    Default: "dbs22csye6225"

  DBName:
    Type: String
    Default: "csye6225"
    
  S3BucketName:
    Type: String
    Default: "csye6225.sethu.dev"

  DomainName:
    Type: String
    Default: "sethusurya.me."

  DomainPrefix: 
    Type: String
    Default: "dev"

  sshKeyName:
    Type: String
    Default: "aws-dev"

  sshKeyValue:
    Type: String
    Default: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQChKYE/DB0rO+xxZhNOANE0Co2gJNjSx8vFnu2jrEE6vIUEsnyIgUQIfbq1jcz9wsZR04gBRDh8X/mmKSLcyKZlM7SxKJ7MZ78EzYCst134yLCW+7o17kfgEgTuCmyi17/m5nuBbURq+AtJMPBF0H5rgrhP8Ug/8TxqCoWcdjSuxd4i24inOHrlvmbcVkbcxkY15mFbJ5Q138aC+LnB9sDVKh6Eo3Q9cbRtZTCag460rlclLIE0b7DWvBglyDCUV+0PoVyFIQgVhXjys8AiDBefeCO6H4c1dswGoQr90RXZu8ny6hQ2+u03cBQ+cZ3iAOAmsRztEYRtuZBXP7JbE88chuYgP80WqaN1hoRIf7I6wvhyIVN3oCksFRBoFgZ9JQr04hEpkombMkpm16pwGnzMIQVLnQu5+uy7D6EUk+AVwGrmA/Zry7yB4LC6jUmeLq79st8Mf3KJ2yEXZlSMuSVaensYjvakYps2ZGAIprmjNuq2C0/qy0dBZKtStAU8Wik= sethu@Sethus-Macbook.local"

  CodeDeployBucketName:
    Type: String
    Default: "codedeploy.sethusurya.com"

  LambdaBucketName:
    Type: String
    Default: "lambdabucket.sethusurya.com"

  SENDGRIDAPI:
    Type: String
    Default: "give the value of key"
  
  tokenttl:
    Type: Number
    Default: 300

  SSLCertificateArn:
    Type: String
    Default: "arn:aws:acm:us-east-1:452294843982:certificate/01b07b55-417e-4358-9bcd-f5b5b0049ba0"
    # Default: "arn:aws:acm:us-east-1:452294843982:certificate/5e1cc099-4256-4987-866e-d1ade200d97c"
  
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: myVPC
  
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet1
  
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet2
  
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidrBlock3
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
      - Key: Name
        Value: mysubnet3

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: myInternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: Name
        Value: myRouteTable
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: !Ref DestinationCidrBlock
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  Subnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref RouteTable
        SubnetId: !Ref Subnet2

  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet3

  application:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Web application security group
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-application-security-group'

  # EC2Instance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     ImageId: !Ref AmiId
  #     InstanceType: "t2.micro"
  #     SubnetId: !Ref Subnet1
  #     SecurityGroupIds: [!Ref application]
  #     KeyName: !Ref ImportedKeyPair
  #     DisableApiTermination: "false"
  #     IamInstanceProfile: !Ref WebAppEC2InstanceProfile
  #     BlockDeviceMappings:
  #     - DeviceName: "/dev/xvda"
  #       Ebs: 
  #         VolumeType: "gp2"
  #         DeleteOnTermination: "true"
  #         VolumeSize: "20"
  #     UserData:
  #       Fn::Base64:
  #         !Sub |
  #           #!/bin/bash
  #           sudo apt-get update
  #           sudo apt-get upgrade -y
  #           sudo apt-get install nginx -y
  #           touch /etc/nginx/sites-available/myserver.config
  #           chmod 777 /etc/nginx/sites-available/myserver.config
  #           cat > /etc/nginx/sites-available/myserver.config << 'EOF'
  #             server{
  #                 listen 80;
  #                 server_name ${DomainPrefix}.${DomainName};
  #                 location / {
  #                     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  #                     proxy_set_header Host $host;
  #                     proxy_pass http://127.0.0.1:3000;
  #                     proxy_http_version 1.1;
  #                     proxy_set_header Upgrade $http_upgrade;
  #                     proxy_set_header Connection "upgrade";
  #                 }
  #             }
  #           EOF
  #           sudo ln -s /etc/nginx/sites-available/myserver.config /etc/nginx/sites-enabled/
  #           sudo unlink /etc/nginx/sites-available/default
  #           sudo rm /etc/nginx/sites-enabled/default
  #           sudo systemctl restart nginx
  #           touch /etc/profile.d/webenv.sh
  #           chmod 777 /etc/profile.d/webenv.sh
  #           cat > /etc/profile.d/webenv.sh << 'EOF'
  #             export DB_ADDRESS=${RDSDBInstance.Endpoint.Address}
  #             export AWS_BUCKET_NAME=${S3BucketName}
  #             export S3REGION=${AWS::Region}
  #             export DB_NAME=${DBName}
  #             export DB_PASSWORD=${MasterDBPassword}
  #             export DB_USER_NAME=${MasterDBUsername}
  #             export SNS_TOPIC_ARN=${SNSTopic}
  #             export tokenExpireSeconds=${tokenttl}
  #           EOF
  #           touch /home/ubuntu/webapp/.env
  #           cat > /home/ubuntu/webapp/.env << 'EOF'
  #             DB_ADDRESS=${RDSDBInstance.Endpoint.Address}
  #             AWS_BUCKET_NAME=${S3BucketName}
  #             S3REGION=${AWS::Region}
  #             DB_NAME=${DBName}
  #             DB_PASSWORD=${MasterDBPassword}
  #             DB_USER_NAME=${MasterDBUsername}
  #             SNS_TOPIC_ARN=${SNSTopic}
  #             tokenExpireSeconds=${tokenttl}
  #           EOF
  #           cd /home/ubuntu/webapp
  #           pm2 reload ecosystem.config.js --update-env
  #           sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/home/ubuntu/webapp/amazon-cloudwatch-config.json
  #     Tags:
  #     - Key: Name
  #       Value: !Sub 'EC2Instance-${AWS::StackName}'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubCidrBlock1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-privatesubnet1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubCidrBlock2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-privatesubnet2'
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateSubCidrBlock3
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 2, !GetAZs '']
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-privatesubnet2'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-PrivateRouteTable'
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet1
      - PrivateRouteTable
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet2
      - PrivateRouteTable
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateSubnet3
      - PrivateRouteTable
    Properties: 
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet3

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database security group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref application
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-database-security-group'
  
  S3BuckeEncrypted:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'aws:kms'
      LifecycleConfiguration:
        Rules:
          - Id: LifeCycleRule
            Status: Enabled
            ExpirationInDays: 90
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Postgres parameter group
      Family: postgres14
      Parameters:
        log_connections: 1

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: DB subnet group for DB Instance
      SubnetIds: 
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3

  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn:
      - RDSCustomerManagedKey
    DeletionPolicy: Delete
    Properties:
      Engine: postgres
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      MultiAZ: false
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      MasterUsername: !Ref MasterDBUsername
      MasterUserPassword: !Ref MasterDBPassword
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      PubliclyAccessible: false
      DBName: !Ref DBName
      AllocatedStorage: 20
      StorageType: "gp2"
      DBParameterGroupName: !Ref RDSParameterGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      StorageEncrypted: true
      KmsKeyId: !Ref RDSCustomerManagedKey

  WebAppS3EC2IAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
            Resource:
              - !GetAtt S3BuckeEncrypted.Arn
              - !Sub '${S3BuckeEncrypted.Arn}/*'
      PolicyName: "WebAppS3"
      Roles:
        - !Ref WebAppS3EC2IAMRole

  WebAppS3EC2IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: EC2-CSYE6225
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"

  GHLambdaS3Policy:
    Type: AWS::IAM::Policy
    DependsOn:
      - LambdaFunction
    Properties:
      Users:
        - "github_lambda"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:PutObject"
            Resource:
              - !Sub 'arn:aws:s3:::${LambdaBucketName}/'
              - !Sub 'arn:aws:s3:::${LambdaBucketName}/*'
          - Effect: Allow
            Action:
              - "lambda:GetFunction"
              - "lambda:UpdateFunctionCode"
            Resource:
              - !GetAtt LambdaFunction.Arn
      PolicyName: "GHLambdaS3Policy"

  LambdaPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - SNSTopic
      - DynamoTokenTbl
      - DynamoEmailListTbl
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource:
              - !GetAtt DynamoTokenTbl.Arn
              - !GetAtt DynamoEmailListTbl.Arn
          - Effect: Allow
            Action:
              - "ses:SendEmail"
              - "ses:SendRawEmail"
            Resource:
              - !Sub 'arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${DomainPrefix}.sethusurya.com'
          - Effect: Allow
            Action:
              - "sns:ListTopics"
              - "sns:CreateTopic"
              - "sns:GetTopicAttributes"
              - "sns:Publish"
            Resource:
              - !Ref SNSTopic
      PolicyName: "LambdaPolicy"
      Roles:
        - !Ref LambdaExecutionRole
        - !Ref WebAppS3EC2IAMRole

  CodeDeployEC2S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:ListBucket"
            Resource:
              - !Sub 'arn:aws:s3:::${CodeDeployBucketName}/'
              - !Sub 'arn:aws:s3:::${CodeDeployBucketName}/*'
      PolicyName: "CodeDeployEC2S3"
      Roles:
        - !Ref WebAppS3EC2IAMRole

  AutoSGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        ImageId: !Ref AmiId
        InstanceType: "t2.micro"
        KeyName: !Ref sshKeyName
        SecurityGroupIds:
          - !Ref application
        DisableApiTermination: "false"
        IamInstanceProfile:
          Name: WebAppEC2InstanceProfile
        BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "20"
            Encrypted: true
            KmsKeyId: !GetAtt EBSKey.Arn
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            sudo apt-get update
            sudo apt-get upgrade -y
            sudo apt-get install nginx -y
            touch /etc/nginx/sites-available/myserver.config
            chmod 777 /etc/nginx/sites-available/myserver.config
            cat > /etc/nginx/sites-available/myserver.config << 'EOF'
              server{
                  listen 80;
                  server_name ${DomainPrefix}.${DomainName};
                  location / {
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header Host $host;
                      proxy_pass http://127.0.0.1:3000;
                      proxy_http_version 1.1;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection "upgrade";
                  }
              }
            EOF
            sudo ln -s /etc/nginx/sites-available/myserver.config /etc/nginx/sites-enabled/
            sudo unlink /etc/nginx/sites-available/default
            sudo rm /etc/nginx/sites-enabled/default
            sudo systemctl restart nginx
            touch /etc/profile.d/webenv.sh
            chmod 777 /etc/profile.d/webenv.sh
            cat > /etc/profile.d/webenv.sh << 'EOF'
              export DB_ADDRESS=${RDSDBInstance.Endpoint.Address}
              export AWS_BUCKET_NAME=${S3BucketName}
              export S3REGION=${AWS::Region}
              export DB_NAME=${DBName}
              export DB_PASSWORD=${MasterDBPassword}
              export DB_USER_NAME=${MasterDBUsername}
              export SNS_TOPIC_ARN=${SNSTopic}
              export tokenExpireSeconds=${tokenttl}
            EOF
            touch /home/ubuntu/webapp/.env
            cat > /home/ubuntu/webapp/.env << 'EOF'
              DB_ADDRESS=${RDSDBInstance.Endpoint.Address}
              AWS_BUCKET_NAME=${S3BucketName}
              S3REGION=${AWS::Region}
              DB_NAME=${DBName}
              DB_PASSWORD=${MasterDBPassword}
              DB_USER_NAME=${MasterDBUsername}
              SNS_TOPIC_ARN=${SNSTopic}
              tokenExpireSeconds=${tokenttl}
            EOF
            cd /home/ubuntu/webapp
            pm2 reload all --update-env
            sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/home/ubuntu/webapp/amazon-cloudwatch-config.json
        TagSpecifications:
          - ResourceType: "instance"
            Tags:
              - Key: Name
                Value: !Sub 'EC2Instance-${AWS::StackName}'   
      LaunchTemplateName: !Sub '${AWS::StackName}-asg-launch-template'
    
  AutoSGWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - application
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-webapp-asg
      AvailabilityZones:
        - !Select [ 0, !GetAZs '' ]
        - !Select [ 1, !GetAZs '' ]
        - !Select [ 2, !GetAZs '' ]
      Cooldown: "60"
      MinSize: "1"
      MaxSize: "5"
      DesiredCapacity: "1"
      HealthCheckGracePeriod: 90
      LaunchTemplate:
        LaunchTemplateId: !Ref AutoSGLaunchTemplate
        Version: !GetAtt AutoSGLaunchTemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub '${AWS::StackName}-webapp-asg'
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref AppLoadBalancerTargetGroup

  AsgScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref AutoSGWebApp
      Cooldown: "60"
      ScalingAdjustment: 1

  AsgScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: "ChangeInCapacity"
      AutoScalingGroupName: !Ref AutoSGWebApp
      Cooldown: "60"
      ScalingAdjustment: -1

  AvgCPUUsageHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: "Trigger when CPU usage is above 5%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5.0
      AlarmActions:
        - !Ref AsgScaleUpPolicy
      ComparisonOperator: GreaterThanThreshold
      Dimensions: 
        - Name: AutoScalingGroupName
          Value: !Ref AutoSGWebApp

  AvgCPUUsageLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmDescription: "Trigger when CPU usage is below 3%"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 3.0
      AlarmActions:
        - !Ref AsgScaleDownPolicy
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoSGWebApp

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - AutoSGWebApp
      - LoadBalancerSecurityGroup
    Properties:
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub '${AWS::StackName}-app-lb'
      Scheme: "internet-facing"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-lb'
      Type: "application"

  AppLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: "/healthz"
      HealthCheckPort: "3000"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: "ipv4"
      Matcher:
        HttpCode: "200-299"
      Name: !Sub '${AWS::StackName}-app-lb-tg'
      Port: 3000
      Protocol: "HTTP"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-app-lb-tg'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: "instance"
      UnhealthyThresholdCount: 2
      VpcId: !Ref Vpc

  AppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref AppLoadBalancerTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Certificates:
        - !Ref SSLCertificateArn
      Port: 443
      Protocol: "HTTPS"

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: LoadBalancerSecurityGroup
      GroupDescription: LoadBalancer security group to allow TCP traffic on ports 80 and 443 from anywhere
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-loadbalancer-security-group'

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: "csye6225-webapp"
      ComputePlatform: "Server"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-codedeploy-app'

  # CodeDeploymentGroup:
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   DependsOn:
  #     - AutoSGWebApp
  #     # - CodeDeployApplication
  #     # - WebAppS3EC2IAMPolicy
  #   Properties:
  #     DeploymentGroupName: "csye6225-webapp-deployment"
  #     ApplicationName: "csye6225-webapp"
  #     DeploymentStyle:
  #       DeploymentOption: "WITHOUT_TRAFFIC_CONTROL"
  #       DeploymentType: "IN_PLACE"
  #     DeploymentConfigName: "CodeDeployDefault.AllAtOnce"
  #     AutoRollbackConfiguration:
  #       Enabled: true
  #       Events:
  #         - "DEPLOYMENT_FAILURE"
  #     Ec2TagFilters: 
  #       - Key: Application
  #         Type: KEY_AND_VALUE
  #         Value: WebApp
  #     OutdatedInstancesStrategy: UPDATE
  #     ServiceRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CodeDeployServiceRole'

  DynamoTokenTbl:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: emailid
          AttributeType: S
      KeySchema:
        - AttributeName: emailid
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20
      TableName: emailTokenTbl
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-token-tb'
      TimeToLiveSpecification: 
        AttributeName: ttl
        Enabled: true

  DynamoEmailListTbl:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
        - AttributeName: emailid
          AttributeType: S
      KeySchema:
        - AttributeName: emailid
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 20
        WriteCapacityUnits: 20
      TableName: emailListTbl
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-emaillist-tb'
      TimeToLiveSpecification: 
        AttributeName: ttl
        Enabled: false

  SNSTopic:
    Type: AWS::SNS::Topic
    DependsOn:
      - LambdaFunction
    Properties:
      DisplayName: 'UserVerificationTopic'
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-sns-topic'
      TopicName: 'UserVerificationTopic'

  LambdaSNSPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SNSTopic
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref SNSTopic

    # create lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: lambda-execution-role
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"

  # create lambda function
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          exports.emailVerification = (event, context, callback) => { 
            console.log('Lambda function for email');
            callback(null);
          }
      Description: Lambda function for email sending
      Environment:
        Variables:
          DomainName: !Sub '${DomainPrefix}.sethusurya.com'
          SENDGRID_API_KEY: !Sub '${SENDGRIDAPI}'
      FunctionName: EmailVerification
      Handler: index.emailVerification
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs16.x
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lambda-emailfn'
      Timeout: 15
      
  WebAppEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      InstanceProfileName: WebAppEC2InstanceProfile
      Roles:
        - !Ref WebAppS3EC2IAMRole
  
  ImportedKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Ref sshKeyName
      PublicKeyMaterial: !Ref sshKeyValue

  myDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: "Accessing application through DNS"
      HostedZoneName: !Sub '${DomainPrefix}.${DomainName}'
      RecordSets:
        - Name: !Sub '${DomainPrefix}.${DomainName}'
          Type: A
          AliasTarget:
            DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'
            HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'

  # ebs customer managed key
  EBSKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: Customer managed EBS Key
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: ebskey
        Statement:
          # for iam user permission 
          - Effect: Allow
            Principal:
              AWS: 
                - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 
              - kms:*
            Resource: '*'
          # service-linked role
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'
          # For persistent resources allow access
          - Effect: Allow
            Principal:
              AWS:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling'
            Action:
              - kms:CreateGrant
            Resource: '*'
            Condition:
              Bool:
                kms:GrantIsForAWSResource: true
      PendingWindowInDays: 7
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ebs-key'

  # alias for ebs key
  EBSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ebskey
      TargetKeyId: !Ref EBSKey

  # rds customer managed key
  RDSCustomerManagedKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: Customer managed RDS Key
      Enabled: true
      KeyPolicy:
        Version: 2012-10-17
        Id: rdskey
        Statement:
          # for iam user permission 
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
      PendingWindowInDays: 7
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-rds-key'

  # alias for rds key
  RDSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/rdskey
      TargetKeyId: !Ref RDSCustomerManagedKey

  
    # creating log groups and streams
  CWLogErrorGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName : csye6225-webapp-error
      RetentionInDays: 5

  CWLogErrorStream:
    Type: AWS::Logs::LogStream
    DependsOn: CWLogErrorGroup
    Properties:
      LogGroupName: "csye6225-webapp-error"
      LogStreamName: "webapp-error-logs"

  CWLogOutputGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName : csye6225-webapp-output
      RetentionInDays: 5

  CWLogOutputStream:
    Type: AWS::Logs::LogStream
    DependsOn: CWLogOutputGroup
    Properties:
      LogGroupName: "csye6225-webapp-output"
      LogStreamName: "webapp-output-logs"
    
Outputs:
  VpcId:
    Description: VPC ID
    Value: !Ref Vpc
  SubnetId1:
    Description: Subnet ID 1
    Value: !Ref Subnet1
  SubnetId2:
    Description: Subnet ID 2
    Value: !Ref Subnet2
  SubnetId3:
    Description: Subnet ID 3
    Value: !Ref Subnet3
